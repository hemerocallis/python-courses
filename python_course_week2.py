
# coding: utf-8

# In[1]:

# Считать отдельными операторами целочисленные ширину и высоту прямоугольника. Создать функцию (def), 
# принимающую в качестве параметров ширину и высоту фигуры и название функции, которую необходимо выполнить. 
# Имя вложенной функции передавать явным образом (например: (a,b,name='perim')).
# Внутри функции создать две вложенные функции (def) по подсчету площади и периметра фигуры. 
# Вывести одной строкой через пробел площадь и периметр, разделенные пробелом (например, '20 18').

a = int(input())
b = int(input())

def f(a, b):
    def sq(a, b):
        return a * b
    def perim(a, b):
        return (a + b) * 2
    print(sq(a, b), perim(a, b))   

f(a, b)


# In[2]:

# Считать отдельными операторами целочисленные ширину и высоту прямоугольника, создать функцию (def), 
# принимающую в качестве параметров ширину и высоту фигуры.
# Внутри функции создать две вложенные функции (lambda) по подсчету площади и периметра фигуры. 
# Вывести одной строкой через пробел площадь и периметр, разделенные пробелом (например '20 18').

a = int(input())
b = int(input())

def func(a, b):
    sq = (lambda a, b: a * b)(a, b)
    perim = (lambda a, b: (a + b) * 2)(a, b)
    print(sq, perim)
             
func(a, b)


# In[6]:

# Считать отдельными операторами целочисленные ширину и высоту прямоугольника, 
# создать список из лямбда функций подсчета площади и периметра фигуры. 
# Вывести первым оператором индекс лямбда функции подсчета площади и ее результат (например:0 20);
# вторым оператором индекс лямбда функции подсчета периметра и ее результат (например:1 18);
# вывести третьим оператором список полученных значений (например: [20, 18]);
# вывести четвертым оператором итоговые значения, сведенные в одну строку через пробел (например: '20 18').

a = int(input())
b = int(input())

sq = (lambda a, b: a * b)
perim = (lambda a, b: (a + b) * 2)

alist = [sq, perim]

def f(a, b, *args):
    for i, arg in enumerate(args):
        print(i, arg(a, b))

f(a, b, *alist)

def f1(*args):
    return sq(a, b), perim(a, b)

c = list(f1(alist, a, b))
print(c)

print(alist[0](a, b), alist[1](a, b))


# In[ ]:



